<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        
    http://activemq.apache.org/schema/core 
    http://activemq.apache.org/schema/core/activemq-core.xsd
    http://camel.apache.org/schema/spring 
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd"
    xmlns:amq="http://activemq.apache.org/schema/core">
    <bean
        class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer" id="props">
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:app.properties</value>
                <value>file:app.properties</value>
                <value>file:${karaf.home}/etc/app.properties</value>
            </list>
        </property>
    </bean>
    <amq:broker id="broker-bf9e2382-fa99-45ed-a93f-220323d61675"
        persistent="false" useJmx="true">
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:61616"/>
        </amq:transportConnectors>
    </amq:broker>
    <bean class="org.infinispan.manager.DefaultCacheManager"
        destroy-method="stop" id="cacheManager" init-method="start">
        <constructor-arg type="java.lang.String" value="infinispan.xml"/>
    </bean>
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="brokerURL" value="${brokerUrl}"/>
        <property name="userName" value="${brokerUsr}"/>
        <property name="password" value="${brokerPwd}"/>
    </bean>
    <bean
        class="com.redhat.empowered.generic.model.GenericObjectFactory" id="genericObjectFactory"/>
    <bean
        class="com.redhat.empowered.generic.processors.TriggerMetricCalculation" id="triggerMetricCalculation"/>
    <camelContext id="event-collector" xmlns="http://camel.apache.org/schema/spring">
        <endpoint id="datagrid" uri="infinispan://{{dgUrl}}"/>
        <restConfiguration bindingMode="json" component="netty4-http"
            enableCORS="true" host="localhost" port="7123"/>
        <rest id="svc" path="/">
            <get id="queryOp" uri="{cacheName}/{uid}">
                <to uri="direct:queryOp"/>
            </get>
        </rest>
        <!-- rest service to query events -->
        <route id="queryOpRoute">
            <from id="queryOpStarter" uri="direct:queryOp"/>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader1">
                <simple>${headers.uid}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanCacheName" id="_setHeader2">
                <simple>${headers.cacheName}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanOperation" id="_setHeader3">
                <constant>CamelInfinispanOperationGet</constant>
            </setHeader>
            <to id="_to1" ref="datagrid"/>
            <setBody id="_setBody1">
                <simple>${header.CamelInfinispanOperationResult}</simple>
            </setBody>
        </route>
        <!-- store the raw POJO -->
        <route id="receiveEventAsPojo">
            <from id="receiveEventAsPojoStarter" uri="activemq:queue:app.stats.storeindicator"/>
            <unmarshal id="_unmarshal1">
                <serialization/>
            </unmarshal>
            <log id="logBody" message="trying to store pojo of type ${body.class}"/>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader4">
                <simple>${body.uid}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanValue" id="_setHeader5">
                <simple>${body}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanCacheName" id="_setHeader6">
                <constant>event</constant>
            </setHeader>
            <setHeader headerName="CamelInfinispanOperation" id="_setHeader7">
                <constant>CamelInfinispanOperationPut</constant>
            </setHeader>
            <to id="_to2" ref="datagrid"/>
        </route>
        <!-- calculating metrics -->
        <route id="calculateMetrics">
            <from id="calculateMetricsStarter" uri="activemq:queue:app.stats.updatestats?acknowledgementModeName=CLIENT_ACKNOWLEDGE"/>
            <unmarshal id="_unmarshal2">
                <serialization/>
            </unmarshal>
            <!-- read existing -->
            <log id="_log1" message="trying to process pojo of type ${body.class}"/>
            <!-- update metrics data -->
            <to id="_to3" uri="direct:getMetricsFromCache"/>
            <!-- save data -->
            <process id="_process1" ref="triggerMetricCalculation"/>
            <to id="_to4" uri="direct:saveMetricsToCache"/>
        </route>
        <!-- retrive metric element from the cache -->
        <!-- expects as input an IndicatorRecord object -->
        <route id="getMetricsFromCache">
            <from id="getMetricsFromCacheStarter" uri="direct:getMetricsFromCache"/>
            <setHeader headerName="CamelInfinispanCacheName" id="_setHeader8">
                <constant>metric</constant>
            </setHeader>
            <setHeader headerName="eventTimestmp" id="_setHeader9">
                <simple>${body.timestmp}</simple>
            </setHeader>
            <!-- key is composed as follows : className.granularity.timestamp -->
            <!-- hourly data -->
            <setHeader headerName="CamelInfinispanOperation" id="_setHeader10">
                <constant>CamelInfinispanOperationGet</constant>
            </setHeader>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader11">
                <simple>${body.class.name}.hourly.${date:header.eventTimestmp:yyyyMMddHH}</simple>
            </setHeader>
            <to id="_to5" ref="datagrid"/>
            <!-- daily data -->
            <choice id="_choice1">
                <when id="_when1">
                    <simple>${header.CamelInfinispanOperationResult} == null</simple>
                    <setHeader headerName="hourly" id="_setHeader12">
                        <method bean="genericObjectFactory" method="createStatisticsRecord(${header.CamelInfinispanKey})"/>
                    </setHeader>
                </when>
                <otherwise id="_otherwise1">
                    <setHeader headerName="hourly" id="_setHeader13">
                        <simple>${header.CamelInfinispanOperationResult}</simple>
                    </setHeader>
                </otherwise>
            </choice>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader14">
                <simple>${body.class.name}.daily.${date:header.eventTimestmp:yyyyMMdd}</simple>
            </setHeader>
            <to id="_to6" ref="datagrid"/>
            <!-- monthly data -->
            <choice id="_choice2">
                <when id="_when2">
                    <simple>${header.CamelInfinispanOperationResult} == null</simple>
                    <setHeader headerName="daily" id="_setHeader15">
                        <method bean="genericObjectFactory" method="createStatisticsRecord(${header.CamelInfinispanKey})"/>
                    </setHeader>
                </when>
                <otherwise id="_otherwise2">
                    <setHeader headerName="daily" id="_setHeader16">
                        <simple>${header.CamelInfinispanOperationResult}</simple>
                    </setHeader>
                </otherwise>
            </choice>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader17">
                <simple>${body.class.name}.monthly.${date:header.eventTimestmp:yyyyMM}</simple>
            </setHeader>
            <to id="_to7" ref="datagrid"/>
            <choice id="_choice3">
                <when id="_when3">
                    <simple>${header.CamelInfinispanOperationResult} == null</simple>
                    <setHeader headerName="monthly" id="_setHeader18">
                        <method bean="genericObjectFactory" method="createStatisticsRecord(${header.CamelInfinispanKey})"/>
                    </setHeader>
                </when>
                <otherwise id="_otherwise3">
                    <setHeader headerName="monthly" id="_setHeader19">
                        <simple>${header.CamelInfinispanOperationResult}</simple>
                    </setHeader>
                </otherwise>
            </choice>
        </route>
        <!-- save metric element from the cache -->
        <!-- expects as input an IndicatorRecord object -->
        <route id="saveMetricsToCache">
            <from id="saveMetricsToCacheStarter" uri="direct:saveMetricsToCache"/>
            <setHeader headerName="CamelInfinispanCacheName" id="_setHeader20">
                <constant>metric</constant>
            </setHeader>
            <!-- key is composed as follows : className.granularity.timestamp -->
            <!-- hourly data -->
            <setHeader headerName="CamelInfinispanOperation" id="_setHeader21">
                <constant>CamelInfinispanOperationPut</constant>
            </setHeader>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader22">
                <simple>${header.hourly.key}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanValue" id="_setHeader23">
                <simple>${header.hourly}</simple>
            </setHeader>
            <!-- daily data -->
            <to id="_to8" ref="datagrid"/>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader24">
                <simple>${header.daily.key}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanValue" id="_setHeader25">
                <simple>${header.daily}</simple>
            </setHeader>
            <!-- monthly data -->
            <to id="_to9" ref="datagrid"/>
            <setHeader headerName="CamelInfinispanKey" id="_setHeader26">
                <simple>${header.monthly.key}</simple>
            </setHeader>
            <setHeader headerName="CamelInfinispanValue" id="_setHeader27">
                <simple>${header.monthly}</simple>
            </setHeader>
            <to id="_to10" ref="datagrid"/>
        </route>
    </camelContext>
</beans>
